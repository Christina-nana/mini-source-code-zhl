export { A as AssertType, E as EnhancedSpy, q as ExpectTypeOf, x as Mock, y as MockContext, w as MockInstance, z as Mocked, B as MockedClass, u as MockedFunction, v as MockedObject, S as SpyInstance, j as afterAll, l as afterEach, r as assertType, h as beforeAll, k as beforeEach, n as createExpect, e as describe, m as expect, p as expectTypeOf, i as it, o as onTestFailed, d as suite, t as test } from './index-b68b3c09.js';
import { R as ResolvedConfig } from './types-b3ff5eea.js';
export { $ as AfterSuiteRunMeta, A as ApiConfig, a5 as ArgumentsType, a4 as Arrayable, a2 as Awaitable, an as BaseCoverageOptions, at as BenchFunction, ar as Benchmark, au as BenchmarkAPI, as as BenchmarkResult, aq as BenchmarkUserOptions, B as BuiltinEnvironment, h as CSSModuleScopeStrategy, C as CollectLineNumbers, e as CollectLines, a9 as Constructable, g as Context, ap as CoverageC8Options, ao as CoverageIstanbulOptions, al as CoverageOptions, ai as CoverageProvider, aj as CoverageProviderModule, ak as CoverageReporter, a7 as DeepMerge, D as DoneCallback, ac as Environment, E as EnvironmentOptions, ab as EnvironmentReturn, ag as ErrorWithDiff, a as File, v as HookCleanupCallback, H as HookListener, I as InlineConfig, J as JSDOMOptions, a6 as MergeInsertions, aa as ModuleCache, M as ModuleGraphData, a8 as MutableArray, a3 as Nullable, ah as OnServerRestartHandler, O as OnTestFailedHandler, af as ParsedStack, ae as Position, c as RawErrsMap, b as Reporter, _ as ResolveIdFunction, R as ResolvedConfig, am as ResolvedCoverageOptions, f as RootAndTarget, k as RunMode, z as RuntimeContext, L as SnapshotData, Q as SnapshotMatchOptions, W as SnapshotResult, P as SnapshotStateOptions, Y as SnapshotSummary, N as SnapshotUpdateState, S as Suite, u as SuiteAPI, x as SuiteCollector, y as SuiteFactory, w as SuiteHooks, q as Task, m as TaskBase, n as TaskResult, T as TaskResultPack, l as TaskState, o as Test, t as TestAPI, G as TestContext, r as TestFunction, s as TestOptions, d as TscErrorInfo, p as TypeCheck, j as TypecheckConfig, X as UncheckedSnapshot, U as UserConfig, ad as UserConsoleLog, K as Vitest, V as VitestEnvironment, i as VitestRunMode, Z as WorkerContext, a1 as WorkerGlobalState, a0 as WorkerRPC } from './types-b3ff5eea.js';
import * as chai from 'chai';
export { chai };
export { assert, should } from 'chai';
export { Bench as BenchFactory, Options as BenchOptions, Task as BenchTask, TaskResult as BenchTaskResult } from 'tinybench';
import 'tinyspy';
import 'vite';
import 'fs';
import 'worker_threads';

declare function startTests(paths: string[], config: ResolvedConfig): Promise<void>;

declare function setupGlobalEnv(config: ResolvedConfig): Promise<void>;

export { setupGlobalEnv, startTests };
